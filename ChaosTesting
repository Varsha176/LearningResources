AWS Fis demo repo
https://github.com/malhotrah/AWS_FIS_DEMO/blob/main/trust_relationship.txt
chaos testing by FIS
https://www.youtube.com/watch?v=_B1Nnpywg84

1) Chaos engineering basics
*************************
https://www.cigniti.com/blog/guide-chaos-engineering/

2) Chaos testing principles
***************************
https://www.qatouch.com/blog/chaos-testing/

3) Chaos eng workshop by Amazon
*******************************
https://gremlin.awsworkshop.io/ee/010_introduction.html


https://dev.to/mikotian/resiliency-1d68

Chaos practical (not complete,but gives some idea)
https://www.youtube.com/watch?v=_oO4zju8M0E
https://www.youtube.com/watch?v=_oO4zju8M0E
https://www.youtube.com/playlist?list=PLlToO4cNkipUkEs7Mcxnv5fBi65oJMZ8d

workshop of testing compete infra
Workshop
https://catalog.workshops.aws/well-architected-reliability/en-US/4-failure-management/4-test/30-testing-for-resiliency-of-ec2-rds-and-s3

simple walkthrough by cloning this repo
https://github.com/chaostoolkit/chaostoolkit-documentation-code/tree/master/tutorials/a-simple-walkthroughchaos

chaos testing for kubernetics
https://www.educative.io/blog/chaos-engineering-process-principles
sample example yaml files
https://github.com/vfarcic/go-demo-8/tree/master/chaos

chaos simple experiments
https://medium.com/walmartglobaltech/chaos-engineering-chaos-toolkit-s1e1-introduction-4381598e649
https://github.com/chaosiq/chaostoolkit-demos
https://medium.com/globant/running-chaos-engineering-experiments-against-a-kubernetes-clusters-b7909035d069

paid course for chaos engineering
https://www.educative.io/courses/devops-toolkit-kubernetes-chaos-engineering

**************************************************************
Q: Where are the test cases/scenarios where we can use chaos testing?
1. Network Outages
Test Case 1: Disconnect a critical service from the network and observe how the system handles the loss of communication.
Test Case 2: Introduce packet loss or network latency and monitor how it affects the overall system performance.
Test Case 3: Intermittently disrupt network connections to simulate real-world network instability.

2. Service Degradation
 Test Case 1: Throttle the response times of a critical service and measure the impact on dependent services.
Test Case 2: Gradually increase the error rates from a service and observe how the system responds under load.
Test Case 3: Introduce random delays or timeouts in API responses to test timeout handling and retries.

3. Resource Exhaustion
Test Case 1: Simulate memory leaks or excessive CPU consumption in one or more components.
Test Case 2: Increase database load beyond normal capacity and observe the impact on query response times.
Test Case 3: Trigger disk space exhaustion and monitor how the system handles write failures or data loss prevention.

4. Configuration Errors
Test Case 1: Introduce incorrect configuration parameters (e.g., wrong database credentials) and verify error handling.
Test Case 2: Change configuration settings dynamically and observe how the system adapts or fails over to new configurations.
Test Case 3: Simulate DNS misconfigurations or incorrect load balancer settings to test failover mechanisms.

5. Third-Party Failures
Test Case 1: Mock responses from third-party APIs to simulate downtime or unexpected errors.
Test Case 2: Introduce delays in responses from third-party services to assess timeout handling and retries.
Test Case 3: Test failover to alternative services or fallback mechanisms when primary dependencies fail.

6. Data Integrity
Test Case 1: Simulate database corruption or data loss scenarios and verify recovery mechanisms.
Test Case 2: Introduce conflicting updates to shared data resources and validate consistency checks.
Test Case 3: Stress-test data replication strategies across distributed nodes and verify eventual consistency.

7. Security Vulnerabilities
Test Case 1: Perform simulated DDoS attacks to evaluate system stability and response strategies.
Test Case 2: Inject malicious input or payloads to test input validation and security controls.
Test Case 3: Check for sensitive data exposure during chaotic conditions (e.g., error messages revealing internal details).

8. Failover and Recovery
Test Case 1: Simulate abrupt shutdowns or crashes of critical nodes and verify failover to backup instances.
Test Case 2: Test auto-scaling mechanisms under varying loads to ensure timely resource allocation.
Test Case 3: Trigger simultaneous failovers of multiple components and measure the system's ability to recover without manual intervention.

9. Elasticity and Scalability
Test Case 1: Gradually increase and decrease traffic to simulate bursty or seasonal loads.
Test Case 2: Add and remove nodes dynamically to assess auto-scaling capabilities.
Test Case 3: Test the systemâ€™s response to sudden spikes in traffic or transaction volumes.


