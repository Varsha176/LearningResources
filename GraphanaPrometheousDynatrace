high-level application architecture of a virtual global e-commerce service 
***************************************************************************
https://scaleyourapp.com/web-service/

*******************************YouTube Playlist****************************************************
https://www.youtube.com/playlist?list=PLTnw6NC76Hn7upiWa8xyEQ3lsJbRcF5Ou (Hindi, very good explanation)
https://www.youtube.com/playlist?list=PLVCgi5HZ0-Ytx5J5fp7A4HG5HreQ-7ZMg (Good for try by yourself)
https://www.youtube.com/playlist?list=PLGyKZJoyKdOdx8Nt1G0rZYfYh8YnY9RPk (with github repo, already cooked code)
************************************************************************************************************************

     Text-based resources for setup
https://www.linode.com/docs/guides/how-to-install-prometheus-and-grafana-on-ubuntu/ (Used successfully)
https://antonputra.com/monitoring/install-prometheus-and-grafana-on-ubuntu/

******************************
What are time series databases?
1)https://www.youtube.com/watch?v=4Dh6ytwB-no
2)https://www.youtube.com/watch?v=vuNEWixlsWY

******************************
Prometheus vs Graphana
1)https://www.zerok.ai/post/prometheus-vs-grafana-in-2023
2)https://last9.io/blog/prometheus-and-grafana/
3)https://prometheus.io/docs/tutorials/alerting_based_on_metrics/
4)https://www.sumologic.com/blog/prometheus-vs-grafana/

1. What is prometheus

Prometheus is an open-source monitoring system, written in Go that collects metrics data and stores that data in a time series database.
it is a pull-based tool. It collects metrics of the target system using HTTP, stores them locally or remotely and displays them back in the Prometheus server.
Prometheus server then scrapes the metrics based on the time interval we defined and stores it in a time-series database.Prometheus.yaml file used for this.
We use Promql to show the status of one target at a particular time.

4 metrics type
1.Counter--only inc or rest to zero.Use cases for counter include request count, tasks completed, and error count.
2.Gauge--Record a value that goes up and down ex temp, memory usage.rate() function can not be used with this.
3.History
4.Summary
https://www.tigera.io/learn/guides/prometheus-monitoring/prometheus-metrics/
https://www.timescale.com/blog/four-types-prometheus-metrics-to-collect/ 


**********************Uninstall Prometheus********************
https://webhostinggeeks.com/howto/how-to-uninstall-prometheus-on-ubuntu/

how to do?
follow in same order
https://www.linode.com/docs/guides/how-to-install-prometheus-and-grafana-on-ubuntu/ (follow this)
https://www.youtube.com/playlist?list=PLTnw6NC76Hn7upiWa8xyEQ3lsJbRcF5Ou (refer this)
https://www.youtube.com/playlist?list=PLVCgi5HZ0-Ytx5J5fp7A4HG5HreQ-7ZMg (refer)
https://www.youtube.com/@PromLabs/playlists (to understand the metrics)

https://www.youtube.com/watch?v=hvACEDjHQZE (To understand PromQL)

PromQL Workshop
https://o11y-workshops.gitlab.io/workshop-prometheus/lab04.html
https://o11y-workshops.gitlab.io/workshop-prometheus/lab05.html
https://www.youtube.com/playlist?list=PLyBW7UHmEXgylLwxdVbrBQJ-fJ_jMvh8h

good resource 
https://www.youtube.com/playlist?list=PLYiz2chG5MSFnyfigVs8yxhCBXpja6wJd

***************************************************************************
Terminology used in Dashboards

What is Failure rate?
total number of requests failed per minute.

total requests-- total number of requests served by a pod

Latency + Processing Time = Response Time, for example:
A package has been sent from A-B-C where A-B took 10 sec, B (processing) took 5 sec, B-C took 10 sec
Latency = (10 + 10) sec = 20 sec
Response time = (10 + 5 + 10) sec = 25 sec

https://www.perfmatrix.com/latency-bandwidth-throughput-and-response-time/

InBound: It accepts the request and processing it. (Travelling towards)

OutBound: when it hit the other 3rd party service.
***************************************************************************
microservice spring boot metrics
1.java buffer pool --Java applications use memory to store data temporarily as it is being processed in the buffer pool memory space, which is used to store data structures such as buffers and caches. 
These structures are essential for improving the applicationâ€™s performance, as they allow the application to temporarily store data, reducing the number of I/O operations required.

2.java compilation metrics - The total time in seconds taken for class compilation
3.JvmGarbageCollectorMetrics -Time spent in a given JVM garbage collector in seconds
4.JvmMemoryMetrics - 
5.JvmRuntimeInfoMetric - jvm_runtime info
6.JvmThreadsMetrics -
7.ProcessMetrics -Total user and system CPU time spent in seconds.

*******************************************************************************
Grafana Alerting Basics
https://www.metricfire.com/blog/grafana-alerting/
https://www.youtube.com/watch?v=nW5AuEtSqVc

************************************************************************
Prometheus interview questions
https://www.devopsschool.com/blog/top-50-prometheus-interview-questions-and-answers/

Grafana interview questions
https://mindmajix.com/grafana-interview-questions
https://www.devopsschool.com/blog/top-50-grafana-interview-questions-and-answers/

What to measure?
latency, traffic, errors and saturation (4 golden signals)
monitoring is done to check availability, resource utilization and performance check

4 essential telemetry types
MELT
METRICS, EVENTS,LOGS, TRACES

************************************************************************
What is Dynatrace?
Dynatrace is both an Application Performance Monitoring and Application Management tool. Dyntrace provides monitoring and tracing end to end from the browser to containers to the mainframe.
It has Real User Monitoring, Synthetic Monitoring, code level monitoring and cloud and infrastructure monitoring.

How is it different from Prometheus?
Dynatrace OneAgent discovers all processes running on the host, no need to install multiple agents for multiple targets.
Auto-discovers and maps entire topology continuously.

What is oneagent?
One agent is a binary file that is configured specifically to collect metrics on the various aspects of the host including OS, HW, Processes etc.

Real User Monitoring: tracks performance data from real users accessing your website or application.RUM is implemented by adding Javascript tags to the application code. It gathers data for different performance metrics, such as how long a page takes to load or performance bottlenecks.
Synthetic Monitoring: gathers performance data using agents that simulate real users. Gather performance data in a pre-production environment in the absence of real user traffic. Can set Benchmark your service against competitors.
code level monitoring: It allows us to track crucial metrics such as response times, resource utilization, error rates, and transaction performance
cloud and infrastructure monitoring: Using cloud-monitoring tools, organizations can proactively monitor the availability, performance, and security of their cloud environments to find and fix problems before they impact the end-user experience.


What is Open Telemetry?
OpenTelemetry is an Observability framework and toolkit designed to create and manage telemetry data such as traces, metrics, and logs.
OpenTelemetry consists of open-source tools, APIs, and SDKs that can be implemented with a variety of programming languages, including Go, Java, and Python.
These tools work together to specify what needs to be measured, gather the relevant data, clean and organize the information, and export it in the appropriate formats to a monitoring backend

Alerting in Dynatrace?
You can also set up alert-filtering rules that are based on the severity, customer impact, associated tags, and/or duration of detected problems.
Dynatrace enables you to automatically push problem notifications to your preferred third-party incident management or ChatOps service.

What are Distributed traces
Distributed tracing is an essential monitoring, debugging, and optimizing tool with the help of which we can visualise how different services are connected and how your requests travel through various tiers of an application.
it helps teams to quickly understand the performance of each microservice.

what are traces?
A trace represents the whole journey of a request or an action as it moves through all the nodes of a distributed system, especially containerized applications or microservices architectures. 
Traces let you profile and observe systems, making it easy to discover bottlenecks and interconnection issues.

A trace can be visualized to give a graphic representation of how long it takes for each step in the data flow pathway to complete. It can show where new requests are initiated and end, and how your system responds. 

https://grafana.com/docs/tempo/latest/traces/

